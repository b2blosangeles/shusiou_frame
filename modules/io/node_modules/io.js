(function () {
	
	var obj =  function (env, pkg, server) {
		let me = this;
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		
		delete require.cache[env.sites_path + '/comm/api/inc/socketNodeClient/socketNodeClient.js'];
		var socketNodeClient = require(env.sites_path + '/comm/api/inc/socketNodeClient/socketNodeClient.js');
		

		let sequenceNumberByClient = new Map();		
		me.io.on("connection", (socket) => {
			socket.on('createRoom', function(room){
				socket.join(room, function() {
					me.io.in(room).clients((err, clients) => {
						me.io.to(room).emit('serverMessage', 
						 { message: socket.id + ' has joined room ' + room + 
						  '. Total ' + clients.length + ' clients :' + clients.join(',') });
					});
				});
				
			});
			socket.on('leaveRoom', function(room){
				socket.leave(room);
			});			
			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				sequenceNumberByClient.delete(socket);
			});
			socket.on('clientData', function(data) {
				if (data._room) {
					if (!data.data._type || data.data._type !== 'innerCall') {
						var socketClient = new socketNodeClient('https://comm1.service.dev.shusiou.win/', env);
						socketClient.sendToRoom(
						    'CRON_REPORT_A',
						    {_type:'innerCall', x:new Date(), Y:999, from : 'https'},
						    function(data) {
							// data.niu = 'JSON.stringify(env)';    
							me.io.to(data._room).emit('serverData', data);
						    }
						);						
						
					} else {
						me.io.to(data._room).emit('serverData', data);
					}
				}	
			});
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();

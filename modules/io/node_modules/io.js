(function () {
	
	var obj =  function (env, pkg, server) {
		let me = this;
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		
		delete require.cache[env.root_path + '/package/socketNodeClient/socketNodeClient.js'];
		var socketNodeClient = require(env.root_path + '/package/socketNodeClient/socketNodeClient.js');
		

		let sequenceNumberByClient = new Map();		
		me.io.on("connection", (socket) => {
			
			socket.on('clientRequest', function(incomeData){
				console.log('===got ' + socket.id + ' == clientRequest');
				console.log(incomeData);
				me.io.to(socket.id).emit('clientRequestCBK', 
				 { message: socket.id, _id: incomeData._id, incomeData : incomeData});				
				/*
				if (incomeData.cmd)
				socket.join(room, function() {
					me.io.in(room).clients((err, clients) => {
						me.io.to(socket.id).emit('afterCreateRoom', 
						 { message: socket.id + ' has joined room ' + room + 
						  '. Total ' + clients.length + ' clients :' + clients.join(',') });
						 
					});
				});
				*/
			});
			
			socket.on('createRoom', function(room){
				socket.join(room, function() {
					me.io.in(room).clients((err, clients) => {
						me.io.to(socket.id).emit('afterCreateRoom', 
						 { message: socket.id + ' has joined room ' + room + 
						  '. Total ' + clients.length + ' clients :' + clients.join(',') });
						 
					});
				});
				
			});
			socket.on('leaveRoom', function(room){
				socket.leave(room);
			});			
			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				sequenceNumberByClient.delete(socket);
			});
			socket.on('clientData', function(data) {
				if (data._room) {
					me.io.to(data._room).emit('serverData', data);
					if (!data._proxy || !data._proxy.length) {	
						return true;
					} else {
						for (var i = 0; i < data._proxy.length; i++) {
							if ((data._link) && data._link === data._proxy[i]) {
								continue;
							}
							var socketClient = new socketNodeClient({
								link: data._proxy[i]
								}, env);
							socketClient.sendToRoom(
							    data._room,
							    data.data,
							    function(data0) {}, 
							    true
							);						
						}
					}
				} else if (data._socket) {
					me.io.to('/#'+data._socket).emit('serverData', data);
					if (!data._proxy || !data._proxy.length) {	
						return true;
					} else {
						for (var i = 0; i < data._proxy.length; i++) {
							if ((data._link) && data._link === data._proxy[i]) {
								continue;
							}
							var socketClient = new socketNodeClient({
								link: data._proxy[i]
								}, env);
							socketClient.sendToSocket(
							    data._socket,
							    data.data,
							    function(data0) {}, 
							    true
							);						
						}
					}
				} 
			});
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
